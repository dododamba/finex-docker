{"version":3,"sources":["src/app/modules/controlleur/controlleur.service.ts","src/app/modules/direction/direction.service.ts","src/app/modules/financement/financement.service.ts","src/app/modules/groupe-travail/groupe-travail.service.ts","src/app/modules/maitre-oeuvrages/maitre-oeuvrages.service.ts","src/app/modules/partenaire/partenaire.service.ts","src/app/modules/role/role.service.ts","src/app/modules/secteur/secteur.service.ts","src/app/modules/soumissionaires/soumissionaire.service.ts","src/app/modules/taches/tache.service.ts","src/app/modules/type-financement/type-financement.service.ts","src/app/modules/type-partenaire/type-partenaire.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {IControlleur} from './controlleur';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {environment} from 'src/environments/environment';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json', 'Cache-Control': 'no-cache'})\n};\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ControlleurService {\n\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'projet-controlleur';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(controlleur: any) {\n        return this.http.post(this.resourceUrl, controlleur, headers);\n    }\n\n    update(controlleur: IControlleur) {\n        return this.http.put(this.resourceUrl, controlleur, headers);\n    }\n\n    find(id: string) {\n        return this.http.get(`${this.resourceUrl}` + '/show/' + id, headers);\n    }\n\n    fetch(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    fetchNoPagination() {\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${this.resourceUrl}/${id}`, headers);\n    }\n}\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {environment} from 'src/environments/environment';\r\n\r\nimport {IDirection} from './direction';\r\n\r\ntype EntityResponseType = HttpResponse<IDirection>;\r\ntype EntityArrayResponseType = HttpResponse<IDirection[]>;\r\nconst headers = {\r\n    headers: new HttpHeaders({'Content-Type': 'application/json', 'Cache-Control': 'no-cache'})\r\n};\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DirecIDirectionService {\r\n    env = environment;\r\n    public resourceUrl = this.env.baseUrl + 'direction';\r\n\r\n    constructor(protected http: HttpClient) {\r\n    }\r\n\r\n    create(direction: IDirection): Observable<EntityResponseType> {\r\n        return this.http.post<IDirection>(this.resourceUrl, direction, {observe: 'response'});\r\n    }\r\n\r\n    update(direction: IDirection): Observable<EntityResponseType> {\r\n        return this.http.put<IDirection>(this.resourceUrl, direction, {observe: 'response'});\r\n    }\r\n\r\n    find(slug: string) {\r\n        return this.http.post(`${this.resourceUrl}` + '/show', slug, headers);\r\n    }\r\n\r\n    query() {\r\n        // return this.http.get<IDirection[]>(`${this.resourceUrl}`, headers);\r\n        return this.http.get(this.resourceUrl, headers);\r\n    }\r\n\r\n    delete(id: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\nimport {environment} from 'src/environments/environment';\nimport {Observable} from 'rxjs';\nimport {IFinancement} from './financement';\nimport {CreateFinancementRequest} from './create-financement-request';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FinancementService {\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'financement';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(financement: CreateFinancementRequest) {\n        return this.http.post(this.resourceUrl, financement, headers);\n    }\n\n    encaisser(encaisser: any) {\n        return this.http.post(this.resourceUrl + '/encaisser', encaisser, headers);\n    }\n\n    update(financement: IFinancement) {\n        return this.http.put<IFinancement>(this.resourceUrl, financement, headers);\n    }\n\n    find(slug: string) {\n        return this.http.get(this.resourceUrl + '/show?slug=' + slug, headers);\n    }\n\n    query(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    noAccount() {\n        return this.http.get(this.resourceUrl + '/without-account', headers);\n    }\n\n    delete(id: string): Observable<HttpResponse<any>> {\n        return this.http.put<any>(`${this.resourceUrl}/delete`, id, headers);\n    }\n}\n","import {environment} from 'src/environments/environment';\nimport {Injectable} from '@angular/core';\nimport {GroupeTravail, IGroupeTravail} from './groupe-travail';\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupeTravailService {\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'groupe-travail';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(groupe: GroupeTravail) {\n        return this.http.post(this.resourceUrl, groupe, headers);\n    }\n\n    update(groupe: IGroupeTravail) {\n        return this.http.put<IGroupeTravail>(this.resourceUrl, groupe, headers);\n    }\n\n    find(slug: string) {\n        return this.http.post(this.resourceUrl + '/show', slug, headers);\n    }\n\n    select(slug: string) {\n        return this.http.get(this.resourceUrl + '/select?slug=' + slug, headers);\n    }\n\n    query(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    noAccount() {\n        return this.http.get(this.resourceUrl + '/without-account', headers);\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, headers);\n    }\n\n    getMyGroup(slug: string) {\n        return this.http.get(this.resourceUrl + '/my-groups?slug=' + slug, headers);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\nimport {IMaitreOeuvrage, MaitreOeuvrage} from './maitre-oeuvrage';\nimport {environment} from 'src/environments/environment';\nimport {Observable} from 'rxjs';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MaitreOeuvrageService {\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'maitre-douvrage';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(employe: MaitreOeuvrage) {\n        return this.http.post(this.resourceUrl, employe, headers);\n    }\n\n    update(employe: IMaitreOeuvrage) {\n        return this.http.put<IMaitreOeuvrage>(this.resourceUrl, employe, headers);\n    }\n\n    find(slug: string) {\n        return this.http.post(this.resourceUrl + '/show', slug, headers);\n    }\n\n    query(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    noPagination() {\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, headers);\n    }\n}\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {environment} from 'src/environments/environment';\r\nimport {IPartenaire} from './partenaire';\r\nimport {PartenaireCreateRequest} from 'src/app/requests/partenaire-create-request';\r\n\r\n\r\nconst headers = {\r\n    headers: new HttpHeaders({'Content-Type': 'application/json', 'Cache-Control': 'no-cache'})\r\n};\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class PartenaireService {\r\n    env = environment;\r\n    public resourceUrl = this.env.baseUrl + 'partenaire';\r\n\r\n    constructor(protected http: HttpClient) {\r\n    }\r\n\r\n    create(role: PartenaireCreateRequest) {\r\n        return this.http.post(this.resourceUrl, role, headers);\r\n    }\r\n\r\n    update(role: IPartenaire) {\r\n        return this.http.put(this.resourceUrl, role, headers);\r\n    }\r\n\r\n    find(id: string) {\r\n        return this.http.get(`${this.resourceUrl}/${id}`, headers);\r\n    }\r\n\r\n    fetch(page: number) {\r\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\r\n    }\r\n\r\n    fetchAll() {\r\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\r\n    }\r\n\r\n\r\n    delete(slug: string) {\r\n        return this.http.put(`${this.resourceUrl}/delete`, slug, headers);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {environment} from 'src/environments/environment';\r\n\r\nimport {IRole} from './role';\r\n\r\ntype EntityResponseType = HttpResponse<IRole>;\r\ntype EntityArrayResponseType = HttpResponse<IRole[]>;\r\n\r\n\r\nconst headers = {\r\n    headers: new HttpHeaders({'Content-Type': 'application/json', 'Cache-Control': 'no-cache'})\r\n};\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class RoleService {\r\n    env = environment;\r\n    public resourceUrl = this.env.baseUrl + 'role';\r\n\r\n    constructor(protected http: HttpClient) {\r\n    }\r\n\r\n    create(role: IRole) {\r\n        return this.http.post<IRole>(this.resourceUrl, role, headers);\r\n    }\r\n\r\n    update(role: IRole) {\r\n        return this.http.put<IRole>(this.resourceUrl, role, headers);\r\n    }\r\n\r\n    find(id: number) {\r\n        //  return this.http.get(`${this.resourceUrl}`, id, headers);\r\n    }\r\n\r\n    query() {\r\n        return this.http.get(this.resourceUrl, headers);\r\n    }\r\n\r\n    delete(id: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, headers);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {ISecteur} from './secteur';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {environment} from 'src/environments/environment';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json', 'Cache-Control': 'no-cache'})\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SecteurService {\n\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'secteur';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(secteur: any) {\n        return this.http.post(this.resourceUrl, secteur, headers);\n    }\n\n    update(secteur: ISecteur) {\n        return this.http.put(this.resourceUrl, secteur, headers);\n    }\n\n    find(id: string) {\n        return this.http.get(`${this.resourceUrl}` + '/show/' + id, headers);\n    }\n\n    fetch(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    fetchNoPagination() {\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${this.resourceUrl}/${id}`, headers);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\nimport {ISoumissionaire, Soumissionaire} from './soumissionaire';\nimport {environment} from 'src/environments/environment';\nimport {Observable} from 'rxjs';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SoumissionaireService {\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'soumissionaire';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(employe: Soumissionaire) {\n        return this.http.post(this.resourceUrl, employe, headers);\n    }\n\n    update(employe: ISoumissionaire) {\n        return this.http.put<ISoumissionaire>(this.resourceUrl, employe, headers);\n    }\n\n    find(slug: string) {\n        return this.http.post(this.resourceUrl + '/show', slug, headers);\n    }\n\n    query(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    noPagination() {\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, headers);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {ITache, Tache} from './tache';\n\nimport {environment} from 'src/environments/environment';\nimport {Observable} from 'rxjs';\nimport {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TacheService {\n\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'tache';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(tache: Tache) {\n        return this.http.post(this.resourceUrl, tache, headers);\n    }\n\n    update(tache: ITache) {\n        return this.http.put<ITache>(this.resourceUrl, tache, headers);\n    }\n\n    find(slug: string) {\n        return this.http.post(this.resourceUrl + '/show', slug, headers);\n    }\n\n    query(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    fetchNoPagination() {\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\n    }\n\n    delete(slug: string): Observable<HttpResponse<any>> {\n        return this.http.put<any>(`${this.resourceUrl}` + '/delete', slug, headers);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {ITypeFinancement} from './type-financement';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json', 'Cache-Control': 'no-cache'})\n};\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TypeFinancementService {\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'type-financement';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(type: any) {\n        return this.http.post(this.resourceUrl, type, headers);\n    }\n\n    update(type: ITypeFinancement) {\n        return this.http.put(this.resourceUrl, type, headers);\n    }\n\n    find(id: string) {\n        return this.http.get(`${this.resourceUrl}` + '/show/' + id, headers);\n    }\n\n    fetch(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    fetchNoPagination() {\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${this.resourceUrl}/${id}`, headers);\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {ITypePartenaire} from './type-partenaire';\nimport {environment} from 'src/environments/environment';\n\nconst headers = {\n    headers: new HttpHeaders({'Content-Type': 'application/json', 'Cache-Control': 'no-cache'})\n};\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TypePartenaireService {\n    env = environment;\n    public resourceUrl = this.env.baseUrl + 'type-partenaire';\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(partenaire: any) {\n        return this.http.post(this.resourceUrl, partenaire, headers);\n    }\n\n    update(partenaire: ITypePartenaire) {\n        return this.http.put(this.resourceUrl, partenaire, headers);\n    }\n\n    find(id: string) {\n        return this.http.get(`${this.resourceUrl}` + '/show/' + id, headers);\n    }\n\n    fetch(page: number) {\n        return this.http.get(this.resourceUrl + '?page=' + page, headers);\n    }\n\n    fetchNoPagination() {\n        return this.http.get(this.resourceUrl + '/no-pagination', headers);\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${this.resourceUrl}/${id}`, headers);\n    }\n}\n"],"sourceRoot":"webpack:///","file":"common-es5.js"}